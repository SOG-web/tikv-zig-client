// Code generated by protoc-gen-zig
///! package kvrpcpb
const std = @import("std");

const pb = @import("protobuf");
const fd = pb.fd;
/// import package deadlock
const deadlock = @import("deadlock.pb.zig");
/// import package resource_manager
const resource_manager = @import("resource_manager.pb.zig");
/// import package tracepb
const tracepb = @import("tracepb.pb.zig");
/// import package gogoproto
const gogoproto = @import("gogoproto.pb.zig");
/// import package metapb
const metapb = @import("metapb.pb.zig");
/// import package rustproto
const rustproto = @import("rustproto.pb.zig");
/// import package errorpb
const errorpb = @import("errorpb.pb.zig");

pub const PessimisticLockWakeUpMode = enum(i32) {
    WakeUpModeNormal = 0,
    WakeUpModeForceLock = 1,
    _,
};

pub const PessimisticLockKeyResultType = enum(i32) {
    LockResultNormal = 0,
    LockResultLockedWithConflict = 1,
    LockResultFailed = 2,
    _,
};

pub const APIVersion = enum(i32) {
    V1 = 0,
    V1TTL = 1,
    V2 = 2,
    _,
};

pub const CommandPri = enum(i32) {
    Normal = 0,
    Low = 1,
    High = 2,
    _,
};

pub const IsolationLevel = enum(i32) {
    SI = 0,
    RC = 1,
    RCCheckTS = 2,
    _,
};

pub const DiskFullOpt = enum(i32) {
    NotAllowedOnFull = 0,
    AllowedOnAlmostFull = 1,
    AllowedOnAlreadyFull = 2,
    _,
};

pub const Op = enum(i32) {
    Put = 0,
    Del = 1,
    Lock = 2,
    Rollback = 3,
    Insert = 4,
    PessimisticLock = 5,
    CheckNotExists = 6,
    _,
};

pub const Assertion = enum(i32) {
    None = 0,
    Exist = 1,
    NotExist = 2,
    _,
};

pub const AssertionLevel = enum(i32) {
    Off = 0,
    Fast = 1,
    Strict = 2,
    _,
};

pub const Action = enum(i32) {
    NoAction = 0,
    TTLExpireRollback = 1,
    LockNotExistRollback = 2,
    MinCommitTSPushed = 3,
    TTLExpirePessimisticRollback = 4,
    LockNotExistDoNothing = 5,
    _,
};

pub const ExtraOp = enum(i32) {
    Noop = 0,
    ReadOldValue = 1,
    _,
};

pub const ChecksumAlgorithm = enum(i32) {
    Crc64_Xor = 0,
    _,
};

pub const GetRequest = struct {
    context: ?Context = null,
    key: []const u8 = &.{},
    version: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
        .version = fd(3, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const GetResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    value: []const u8 = &.{},
    not_found: bool = false,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .value = fd(3, .{ .scalar = .bytes }),
        .not_found = fd(4, .{ .scalar = .bool }),
        .exec_details_v2 = fd(6, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ScanRequest = struct {
    context: ?Context = null,
    start_key: []const u8 = &.{},
    limit: u32 = 0,
    version: u64 = 0,
    key_only: bool = false,
    reverse: bool = false,
    end_key: []const u8 = &.{},
    sample_step: u32 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_key = fd(2, .{ .scalar = .bytes }),
        .limit = fd(3, .{ .scalar = .uint32 }),
        .version = fd(4, .{ .scalar = .uint64 }),
        .key_only = fd(5, .{ .scalar = .bool }),
        .reverse = fd(6, .{ .scalar = .bool }),
        .end_key = fd(7, .{ .scalar = .bytes }),
        .sample_step = fd(8, .{ .scalar = .uint32 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ScanResponse = struct {
    region_error: ?errorpb.Error = null,
    pairs: std.ArrayListUnmanaged(KvPair) = .empty,
    @"error": ?KeyError = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .pairs = fd(2, .{ .repeated = .submessage }),
        .@"error" = fd(3, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PrewriteRequest = struct {
    context: ?Context = null,
    mutations: std.ArrayListUnmanaged(Mutation) = .empty,
    primary_lock: []const u8 = &.{},
    start_version: u64 = 0,
    lock_ttl: u64 = 0,
    skip_constraint_check: bool = false,
    pessimistic_actions: std.ArrayListUnmanaged(PrewriteRequest.PessimisticAction) = .empty,
    txn_size: u64 = 0,
    for_update_ts: u64 = 0,
    min_commit_ts: u64 = 0,
    use_async_commit: bool = false,
    secondaries: std.ArrayListUnmanaged([]const u8) = .empty,
    try_one_pc: bool = false,
    max_commit_ts: u64 = 0,
    assertion_level: AssertionLevel = @enumFromInt(0),
    for_update_ts_constraints: std.ArrayListUnmanaged(PrewriteRequest.ForUpdateTSConstraint) = .empty,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .mutations = fd(2, .{ .repeated = .submessage }),
        .primary_lock = fd(3, .{ .scalar = .bytes }),
        .start_version = fd(4, .{ .scalar = .uint64 }),
        .lock_ttl = fd(5, .{ .scalar = .uint64 }),
        .skip_constraint_check = fd(6, .{ .scalar = .bool }),
        .pessimistic_actions = fd(7, .{ .repeated = .@"enum" }),
        .txn_size = fd(8, .{ .scalar = .uint64 }),
        .for_update_ts = fd(9, .{ .scalar = .uint64 }),
        .min_commit_ts = fd(10, .{ .scalar = .uint64 }),
        .use_async_commit = fd(11, .{ .scalar = .bool }),
        .secondaries = fd(12, .{ .repeated = .{ .scalar = .bytes } }),
        .try_one_pc = fd(13, .{ .scalar = .bool }),
        .max_commit_ts = fd(14, .{ .scalar = .uint64 }),
        .assertion_level = fd(15, .@"enum"),
        .for_update_ts_constraints = fd(16, .{ .repeated = .submessage }),
    };

    pub const PessimisticAction = enum(i32) {
        SKIP_PESSIMISTIC_CHECK = 0,
        DO_PESSIMISTIC_CHECK = 1,
        DO_CONSTRAINT_CHECK = 2,
        _,
    };

    pub const ForUpdateTSConstraint = struct {
        index: u32 = 0,
        expected_for_update_ts: u64 = 0,

        pub const _desc_table = .{
            .index = fd(1, .{ .scalar = .uint32 }),
            .expected_for_update_ts = fd(2, .{ .scalar = .uint64 }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PrewriteResponse = struct {
    region_error: ?errorpb.Error = null,
    errors: std.ArrayListUnmanaged(KeyError) = .empty,
    min_commit_ts: u64 = 0,
    one_pc_commit_ts: u64 = 0,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .errors = fd(2, .{ .repeated = .submessage }),
        .min_commit_ts = fd(3, .{ .scalar = .uint64 }),
        .one_pc_commit_ts = fd(4, .{ .scalar = .uint64 }),
        .exec_details_v2 = fd(5, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PessimisticLockRequest = struct {
    context: ?Context = null,
    mutations: std.ArrayListUnmanaged(Mutation) = .empty,
    primary_lock: []const u8 = &.{},
    start_version: u64 = 0,
    lock_ttl: u64 = 0,
    for_update_ts: u64 = 0,
    is_first_lock: bool = false,
    wait_timeout: i64 = 0,
    force: bool = false,
    return_values: bool = false,
    min_commit_ts: u64 = 0,
    check_existence: bool = false,
    lock_only_if_exists: bool = false,
    wake_up_mode: PessimisticLockWakeUpMode = @enumFromInt(0),

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .mutations = fd(2, .{ .repeated = .submessage }),
        .primary_lock = fd(3, .{ .scalar = .bytes }),
        .start_version = fd(4, .{ .scalar = .uint64 }),
        .lock_ttl = fd(5, .{ .scalar = .uint64 }),
        .for_update_ts = fd(6, .{ .scalar = .uint64 }),
        .is_first_lock = fd(7, .{ .scalar = .bool }),
        .wait_timeout = fd(8, .{ .scalar = .int64 }),
        .force = fd(9, .{ .scalar = .bool }),
        .return_values = fd(10, .{ .scalar = .bool }),
        .min_commit_ts = fd(11, .{ .scalar = .uint64 }),
        .check_existence = fd(12, .{ .scalar = .bool }),
        .lock_only_if_exists = fd(13, .{ .scalar = .bool }),
        .wake_up_mode = fd(14, .@"enum"),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PessimisticLockKeyResult = struct {
    type: PessimisticLockKeyResultType = @enumFromInt(0),
    value: []const u8 = &.{},
    existence: bool = false,
    locked_with_conflict_ts: u64 = 0,
    skip_resolving_lock: bool = false,

    pub const _desc_table = .{
        .type = fd(1, .@"enum"),
        .value = fd(2, .{ .scalar = .bytes }),
        .existence = fd(3, .{ .scalar = .bool }),
        .locked_with_conflict_ts = fd(4, .{ .scalar = .uint64 }),
        .skip_resolving_lock = fd(11, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PessimisticLockResponse = struct {
    region_error: ?errorpb.Error = null,
    errors: std.ArrayListUnmanaged(KeyError) = .empty,
    commit_ts: u64 = 0,
    value: []const u8 = &.{},
    values: std.ArrayListUnmanaged([]const u8) = .empty,
    not_founds: std.ArrayListUnmanaged(bool) = .empty,
    exec_details_v2: ?ExecDetailsV2 = null,
    results: std.ArrayListUnmanaged(PessimisticLockKeyResult) = .empty,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .errors = fd(2, .{ .repeated = .submessage }),
        .commit_ts = fd(3, .{ .scalar = .uint64 }),
        .value = fd(4, .{ .scalar = .bytes }),
        .values = fd(5, .{ .repeated = .{ .scalar = .bytes } }),
        .not_founds = fd(6, .{ .packed_repeated = .{ .scalar = .bool } }),
        .exec_details_v2 = fd(7, .submessage),
        .results = fd(8, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PessimisticRollbackRequest = struct {
    context: ?Context = null,
    start_version: u64 = 0,
    for_update_ts: u64 = 0,
    keys: std.ArrayListUnmanaged([]const u8) = .empty,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_version = fd(2, .{ .scalar = .uint64 }),
        .for_update_ts = fd(3, .{ .scalar = .uint64 }),
        .keys = fd(4, .{ .repeated = .{ .scalar = .bytes } }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PessimisticRollbackResponse = struct {
    region_error: ?errorpb.Error = null,
    errors: std.ArrayListUnmanaged(KeyError) = .empty,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .errors = fd(2, .{ .repeated = .submessage }),
        .exec_details_v2 = fd(3, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const TxnHeartBeatRequest = struct {
    context: ?Context = null,
    primary_lock: []const u8 = &.{},
    start_version: u64 = 0,
    advise_lock_ttl: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .primary_lock = fd(2, .{ .scalar = .bytes }),
        .start_version = fd(3, .{ .scalar = .uint64 }),
        .advise_lock_ttl = fd(4, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const TxnHeartBeatResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    lock_ttl: u64 = 0,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .lock_ttl = fd(3, .{ .scalar = .uint64 }),
        .exec_details_v2 = fd(4, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CheckTxnStatusRequest = struct {
    context: ?Context = null,
    primary_key: []const u8 = &.{},
    lock_ts: u64 = 0,
    caller_start_ts: u64 = 0,
    current_ts: u64 = 0,
    rollback_if_not_exist: bool = false,
    force_sync_commit: bool = false,
    resolving_pessimistic_lock: bool = false,
    verify_is_primary: bool = false,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .primary_key = fd(2, .{ .scalar = .bytes }),
        .lock_ts = fd(3, .{ .scalar = .uint64 }),
        .caller_start_ts = fd(4, .{ .scalar = .uint64 }),
        .current_ts = fd(5, .{ .scalar = .uint64 }),
        .rollback_if_not_exist = fd(6, .{ .scalar = .bool }),
        .force_sync_commit = fd(7, .{ .scalar = .bool }),
        .resolving_pessimistic_lock = fd(8, .{ .scalar = .bool }),
        .verify_is_primary = fd(9, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CheckTxnStatusResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    lock_ttl: u64 = 0,
    commit_version: u64 = 0,
    action: Action = @enumFromInt(0),
    lock_info: ?LockInfo = null,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .lock_ttl = fd(3, .{ .scalar = .uint64 }),
        .commit_version = fd(4, .{ .scalar = .uint64 }),
        .action = fd(5, .@"enum"),
        .lock_info = fd(6, .submessage),
        .exec_details_v2 = fd(7, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CheckSecondaryLocksRequest = struct {
    context: ?Context = null,
    keys: std.ArrayListUnmanaged([]const u8) = .empty,
    start_version: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .keys = fd(2, .{ .repeated = .{ .scalar = .bytes } }),
        .start_version = fd(3, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CheckSecondaryLocksResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    locks: std.ArrayListUnmanaged(LockInfo) = .empty,
    commit_ts: u64 = 0,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .locks = fd(3, .{ .repeated = .submessage }),
        .commit_ts = fd(4, .{ .scalar = .uint64 }),
        .exec_details_v2 = fd(5, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CommitRequest = struct {
    context: ?Context = null,
    start_version: u64 = 0,
    keys: std.ArrayListUnmanaged([]const u8) = .empty,
    commit_version: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_version = fd(2, .{ .scalar = .uint64 }),
        .keys = fd(3, .{ .repeated = .{ .scalar = .bytes } }),
        .commit_version = fd(4, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CommitResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    commit_version: u64 = 0,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .commit_version = fd(3, .{ .scalar = .uint64 }),
        .exec_details_v2 = fd(4, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ImportRequest = struct {
    mutations: std.ArrayListUnmanaged(Mutation) = .empty,
    commit_version: u64 = 0,

    pub const _desc_table = .{
        .mutations = fd(1, .{ .repeated = .submessage }),
        .commit_version = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ImportResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CleanupRequest = struct {
    context: ?Context = null,
    key: []const u8 = &.{},
    start_version: u64 = 0,
    current_ts: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
        .start_version = fd(3, .{ .scalar = .uint64 }),
        .current_ts = fd(4, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CleanupResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    commit_version: u64 = 0,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .commit_version = fd(3, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const BatchGetRequest = struct {
    context: ?Context = null,
    keys: std.ArrayListUnmanaged([]const u8) = .empty,
    version: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .keys = fd(2, .{ .repeated = .{ .scalar = .bytes } }),
        .version = fd(3, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const BatchGetResponse = struct {
    region_error: ?errorpb.Error = null,
    pairs: std.ArrayListUnmanaged(KvPair) = .empty,
    exec_details_v2: ?ExecDetailsV2 = null,
    @"error": ?KeyError = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .pairs = fd(2, .{ .repeated = .submessage }),
        .exec_details_v2 = fd(4, .submessage),
        .@"error" = fd(5, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const BatchRollbackRequest = struct {
    context: ?Context = null,
    start_version: u64 = 0,
    keys: std.ArrayListUnmanaged([]const u8) = .empty,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_version = fd(2, .{ .scalar = .uint64 }),
        .keys = fd(3, .{ .repeated = .{ .scalar = .bytes } }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const BatchRollbackResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .exec_details_v2 = fd(3, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ScanLockRequest = struct {
    context: ?Context = null,
    max_version: u64 = 0,
    start_key: []const u8 = &.{},
    limit: u32 = 0,
    end_key: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .max_version = fd(2, .{ .scalar = .uint64 }),
        .start_key = fd(3, .{ .scalar = .bytes }),
        .limit = fd(4, .{ .scalar = .uint32 }),
        .end_key = fd(5, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ScanLockResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    locks: std.ArrayListUnmanaged(LockInfo) = .empty,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .locks = fd(3, .{ .repeated = .submessage }),
        .exec_details_v2 = fd(4, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ResolveLockRequest = struct {
    context: ?Context = null,
    start_version: u64 = 0,
    commit_version: u64 = 0,
    txn_infos: std.ArrayListUnmanaged(TxnInfo) = .empty,
    keys: std.ArrayListUnmanaged([]const u8) = .empty,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_version = fd(2, .{ .scalar = .uint64 }),
        .commit_version = fd(3, .{ .scalar = .uint64 }),
        .txn_infos = fd(4, .{ .repeated = .submessage }),
        .keys = fd(5, .{ .repeated = .{ .scalar = .bytes } }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ResolveLockResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,
    exec_details_v2: ?ExecDetailsV2 = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
        .exec_details_v2 = fd(3, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const GCRequest = struct {
    context: ?Context = null,
    safe_point: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .safe_point = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const GCResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": ?KeyError = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const DeleteRangeRequest = struct {
    context: ?Context = null,
    start_key: []const u8 = &.{},
    end_key: []const u8 = &.{},
    notify_only: bool = false,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_key = fd(2, .{ .scalar = .bytes }),
        .end_key = fd(3, .{ .scalar = .bytes }),
        .notify_only = fd(4, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const DeleteRangeResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PrepareFlashbackToVersionRequest = struct {
    context: ?Context = null,
    start_key: []const u8 = &.{},
    end_key: []const u8 = &.{},
    start_ts: u64 = 0,
    version: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_key = fd(2, .{ .scalar = .bytes }),
        .end_key = fd(3, .{ .scalar = .bytes }),
        .start_ts = fd(4, .{ .scalar = .uint64 }),
        .version = fd(5, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PrepareFlashbackToVersionResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const FlashbackToVersionRequest = struct {
    context: ?Context = null,
    version: u64 = 0,
    start_key: []const u8 = &.{},
    end_key: []const u8 = &.{},
    start_ts: u64 = 0,
    commit_ts: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .version = fd(2, .{ .scalar = .uint64 }),
        .start_key = fd(3, .{ .scalar = .bytes }),
        .end_key = fd(4, .{ .scalar = .bytes }),
        .start_ts = fd(5, .{ .scalar = .uint64 }),
        .commit_ts = fd(6, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const FlashbackToVersionResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawGetRequest = struct {
    context: ?Context = null,
    key: []const u8 = &.{},
    cf: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
        .cf = fd(3, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawGetResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    value: []const u8 = &.{},
    not_found: bool = false,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .value = fd(3, .{ .scalar = .bytes }),
        .not_found = fd(4, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawBatchGetRequest = struct {
    context: ?Context = null,
    keys: std.ArrayListUnmanaged([]const u8) = .empty,
    cf: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .keys = fd(2, .{ .repeated = .{ .scalar = .bytes } }),
        .cf = fd(3, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawBatchGetResponse = struct {
    region_error: ?errorpb.Error = null,
    pairs: std.ArrayListUnmanaged(KvPair) = .empty,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .pairs = fd(2, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawPutRequest = struct {
    context: ?Context = null,
    key: []const u8 = &.{},
    value: []const u8 = &.{},
    cf: []const u8 = &.{},
    ttl: u64 = 0,
    for_cas: bool = false,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
        .value = fd(3, .{ .scalar = .bytes }),
        .cf = fd(4, .{ .scalar = .string }),
        .ttl = fd(5, .{ .scalar = .uint64 }),
        .for_cas = fd(6, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawPutResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawBatchPutRequest = struct {
    context: ?Context = null,
    pairs: std.ArrayListUnmanaged(KvPair) = .empty,
    cf: []const u8 = &.{},
    ttl: u64 = 0,
    for_cas: bool = false,
    ttls: std.ArrayListUnmanaged(u64) = .empty,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .pairs = fd(2, .{ .repeated = .submessage }),
        .cf = fd(3, .{ .scalar = .string }),
        .ttl = fd(4, .{ .scalar = .uint64 }),
        .for_cas = fd(5, .{ .scalar = .bool }),
        .ttls = fd(6, .{ .packed_repeated = .{ .scalar = .uint64 } }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawBatchPutResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawDeleteRequest = struct {
    context: ?Context = null,
    key: []const u8 = &.{},
    cf: []const u8 = &.{},
    for_cas: bool = false,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
        .cf = fd(3, .{ .scalar = .string }),
        .for_cas = fd(4, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawDeleteResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawBatchDeleteRequest = struct {
    context: ?Context = null,
    keys: std.ArrayListUnmanaged([]const u8) = .empty,
    cf: []const u8 = &.{},
    for_cas: bool = false,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .keys = fd(2, .{ .repeated = .{ .scalar = .bytes } }),
        .cf = fd(3, .{ .scalar = .string }),
        .for_cas = fd(4, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawBatchDeleteResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawScanRequest = struct {
    context: ?Context = null,
    start_key: []const u8 = &.{},
    limit: u32 = 0,
    key_only: bool = false,
    cf: []const u8 = &.{},
    reverse: bool = false,
    end_key: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_key = fd(2, .{ .scalar = .bytes }),
        .limit = fd(3, .{ .scalar = .uint32 }),
        .key_only = fd(4, .{ .scalar = .bool }),
        .cf = fd(5, .{ .scalar = .string }),
        .reverse = fd(6, .{ .scalar = .bool }),
        .end_key = fd(7, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawScanResponse = struct {
    region_error: ?errorpb.Error = null,
    kvs: std.ArrayListUnmanaged(KvPair) = .empty,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .kvs = fd(2, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawDeleteRangeRequest = struct {
    context: ?Context = null,
    start_key: []const u8 = &.{},
    end_key: []const u8 = &.{},
    cf: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_key = fd(2, .{ .scalar = .bytes }),
        .end_key = fd(3, .{ .scalar = .bytes }),
        .cf = fd(4, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawDeleteRangeResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawBatchScanRequest = struct {
    context: ?Context = null,
    ranges: std.ArrayListUnmanaged(KeyRange) = .empty,
    each_limit: u32 = 0,
    key_only: bool = false,
    cf: []const u8 = &.{},
    reverse: bool = false,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .ranges = fd(2, .{ .repeated = .submessage }),
        .each_limit = fd(3, .{ .scalar = .uint32 }),
        .key_only = fd(4, .{ .scalar = .bool }),
        .cf = fd(5, .{ .scalar = .string }),
        .reverse = fd(6, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawBatchScanResponse = struct {
    region_error: ?errorpb.Error = null,
    kvs: std.ArrayListUnmanaged(KvPair) = .empty,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .kvs = fd(2, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const UnsafeDestroyRangeRequest = struct {
    context: ?Context = null,
    start_key: []const u8 = &.{},
    end_key: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_key = fd(2, .{ .scalar = .bytes }),
        .end_key = fd(3, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const UnsafeDestroyRangeResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RegisterLockObserverRequest = struct {
    context: ?Context = null,
    max_ts: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .max_ts = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RegisterLockObserverResponse = struct {
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .@"error" = fd(1, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CheckLockObserverRequest = struct {
    context: ?Context = null,
    max_ts: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .max_ts = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CheckLockObserverResponse = struct {
    @"error": []const u8 = &.{},
    is_clean: bool = false,
    locks: std.ArrayListUnmanaged(LockInfo) = .empty,

    pub const _desc_table = .{
        .@"error" = fd(1, .{ .scalar = .string }),
        .is_clean = fd(2, .{ .scalar = .bool }),
        .locks = fd(3, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RemoveLockObserverRequest = struct {
    context: ?Context = null,
    max_ts: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .max_ts = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RemoveLockObserverResponse = struct {
    @"error": []const u8 = &.{},

    pub const _desc_table = .{
        .@"error" = fd(1, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PhysicalScanLockRequest = struct {
    context: ?Context = null,
    max_ts: u64 = 0,
    start_key: []const u8 = &.{},
    limit: u32 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .max_ts = fd(2, .{ .scalar = .uint64 }),
        .start_key = fd(3, .{ .scalar = .bytes }),
        .limit = fd(4, .{ .scalar = .uint32 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PhysicalScanLockResponse = struct {
    @"error": []const u8 = &.{},
    locks: std.ArrayListUnmanaged(LockInfo) = .empty,

    pub const _desc_table = .{
        .@"error" = fd(1, .{ .scalar = .string }),
        .locks = fd(2, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const SplitRegionRequest = struct {
    context: ?Context = null,
    split_key: []const u8 = &.{},
    split_keys: std.ArrayListUnmanaged([]const u8) = .empty,
    is_raw_kv: bool = false,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .split_key = fd(2, .{ .scalar = .bytes }),
        .split_keys = fd(3, .{ .repeated = .{ .scalar = .bytes } }),
        .is_raw_kv = fd(4, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const SplitRegionResponse = struct {
    region_error: ?errorpb.Error = null,
    left: ?metapb.Region = null,
    right: ?metapb.Region = null,
    regions: std.ArrayListUnmanaged(metapb.Region) = .empty,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .left = fd(2, .submessage),
        .right = fd(3, .submessage),
        .regions = fd(4, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ReadIndexRequest = struct {
    context: ?Context = null,
    start_ts: u64 = 0,
    ranges: std.ArrayListUnmanaged(KeyRange) = .empty,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_ts = fd(2, .{ .scalar = .uint64 }),
        .ranges = fd(3, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ReadIndexResponse = struct {
    region_error: ?errorpb.Error = null,
    read_index: u64 = 0,
    locked: ?LockInfo = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .read_index = fd(2, .{ .scalar = .uint64 }),
        .locked = fd(3, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const MvccGetByKeyRequest = struct {
    context: ?Context = null,
    key: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const MvccGetByKeyResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    info: ?MvccInfo = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .info = fd(3, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const MvccGetByStartTsRequest = struct {
    context: ?Context = null,
    start_ts: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .start_ts = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const MvccGetByStartTsResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    key: []const u8 = &.{},
    info: ?MvccInfo = null,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .key = fd(3, .{ .scalar = .bytes }),
        .info = fd(4, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const Context = struct {
    region_id: u64 = 0,
    region_epoch: ?metapb.RegionEpoch = null,
    peer: ?metapb.Peer = null,
    term: u64 = 0,
    priority: CommandPri = @enumFromInt(0),
    isolation_level: IsolationLevel = @enumFromInt(0),
    not_fill_cache: bool = false,
    sync_log: bool = false,
    record_time_stat: bool = false,
    record_scan_stat: bool = false,
    replica_read: bool = false,
    resolved_locks: std.ArrayListUnmanaged(u64) = .empty,
    max_execution_duration_ms: u64 = 0,
    applied_index: u64 = 0,
    task_id: u64 = 0,
    stale_read: bool = false,
    resource_group_tag: []const u8 = &.{},
    disk_full_opt: DiskFullOpt = @enumFromInt(0),
    is_retry_request: bool = false,
    api_version: APIVersion = @enumFromInt(0),
    committed_locks: std.ArrayListUnmanaged(u64) = .empty,
    trace_context: ?tracepb.TraceContext = null,
    request_source: []const u8 = &.{},
    txn_source: u64 = 0,
    busy_threshold_ms: u32 = 0,
    resource_control_context: ?ResourceControlContext = null,
    keyspace_id: u32 = 0,
    buckets_version: u64 = 0,

    pub const _desc_table = .{
        .region_id = fd(1, .{ .scalar = .uint64 }),
        .region_epoch = fd(2, .submessage),
        .peer = fd(3, .submessage),
        .term = fd(5, .{ .scalar = .uint64 }),
        .priority = fd(6, .@"enum"),
        .isolation_level = fd(7, .@"enum"),
        .not_fill_cache = fd(8, .{ .scalar = .bool }),
        .sync_log = fd(9, .{ .scalar = .bool }),
        .record_time_stat = fd(10, .{ .scalar = .bool }),
        .record_scan_stat = fd(11, .{ .scalar = .bool }),
        .replica_read = fd(12, .{ .scalar = .bool }),
        .resolved_locks = fd(13, .{ .packed_repeated = .{ .scalar = .uint64 } }),
        .max_execution_duration_ms = fd(14, .{ .scalar = .uint64 }),
        .applied_index = fd(15, .{ .scalar = .uint64 }),
        .task_id = fd(16, .{ .scalar = .uint64 }),
        .stale_read = fd(17, .{ .scalar = .bool }),
        .resource_group_tag = fd(18, .{ .scalar = .bytes }),
        .disk_full_opt = fd(19, .@"enum"),
        .is_retry_request = fd(20, .{ .scalar = .bool }),
        .api_version = fd(21, .@"enum"),
        .committed_locks = fd(22, .{ .packed_repeated = .{ .scalar = .uint64 } }),
        .trace_context = fd(23, .submessage),
        .request_source = fd(24, .{ .scalar = .string }),
        .txn_source = fd(25, .{ .scalar = .uint64 }),
        .busy_threshold_ms = fd(27, .{ .scalar = .uint32 }),
        .resource_control_context = fd(28, .submessage),
        .keyspace_id = fd(32, .{ .scalar = .uint32 }),
        .buckets_version = fd(33, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ResourceControlContext = struct {
    resource_group_name: []const u8 = &.{},
    penalty: ?resource_manager.Consumption = null,
    override_priority: u64 = 0,

    pub const _desc_table = .{
        .resource_group_name = fd(1, .{ .scalar = .string }),
        .penalty = fd(2, .submessage),
        .override_priority = fd(3, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const LockInfo = struct {
    primary_lock: []const u8 = &.{},
    lock_version: u64 = 0,
    key: []const u8 = &.{},
    lock_ttl: u64 = 0,
    txn_size: u64 = 0,
    lock_type: Op = @enumFromInt(0),
    lock_for_update_ts: u64 = 0,
    use_async_commit: bool = false,
    min_commit_ts: u64 = 0,
    secondaries: std.ArrayListUnmanaged([]const u8) = .empty,
    duration_to_last_update_ms: u64 = 0,

    pub const _desc_table = .{
        .primary_lock = fd(1, .{ .scalar = .bytes }),
        .lock_version = fd(2, .{ .scalar = .uint64 }),
        .key = fd(3, .{ .scalar = .bytes }),
        .lock_ttl = fd(4, .{ .scalar = .uint64 }),
        .txn_size = fd(5, .{ .scalar = .uint64 }),
        .lock_type = fd(6, .@"enum"),
        .lock_for_update_ts = fd(7, .{ .scalar = .uint64 }),
        .use_async_commit = fd(8, .{ .scalar = .bool }),
        .min_commit_ts = fd(9, .{ .scalar = .uint64 }),
        .secondaries = fd(10, .{ .repeated = .{ .scalar = .bytes } }),
        .duration_to_last_update_ms = fd(11, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const KeyError = struct {
    locked: ?LockInfo = null,
    retryable: []const u8 = &.{},
    abort: []const u8 = &.{},
    conflict: ?WriteConflict = null,
    already_exist: ?AlreadyExist = null,
    deadlock: ?Deadlock = null,
    commit_ts_expired: ?CommitTsExpired = null,
    txn_not_found: ?TxnNotFound = null,
    commit_ts_too_large: ?CommitTsTooLarge = null,
    assertion_failed: ?AssertionFailed = null,
    primary_mismatch: ?PrimaryMismatch = null,

    pub const _desc_table = .{
        .locked = fd(1, .submessage),
        .retryable = fd(2, .{ .scalar = .string }),
        .abort = fd(3, .{ .scalar = .string }),
        .conflict = fd(4, .submessage),
        .already_exist = fd(5, .submessage),
        .deadlock = fd(6, .submessage),
        .commit_ts_expired = fd(7, .submessage),
        .txn_not_found = fd(8, .submessage),
        .commit_ts_too_large = fd(9, .submessage),
        .assertion_failed = fd(10, .submessage),
        .primary_mismatch = fd(11, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const WriteConflict = struct {
    start_ts: u64 = 0,
    conflict_ts: u64 = 0,
    key: []const u8 = &.{},
    primary: []const u8 = &.{},
    conflict_commit_ts: u64 = 0,
    reason: WriteConflict.Reason = @enumFromInt(0),

    pub const _desc_table = .{
        .start_ts = fd(1, .{ .scalar = .uint64 }),
        .conflict_ts = fd(2, .{ .scalar = .uint64 }),
        .key = fd(3, .{ .scalar = .bytes }),
        .primary = fd(4, .{ .scalar = .bytes }),
        .conflict_commit_ts = fd(5, .{ .scalar = .uint64 }),
        .reason = fd(6, .@"enum"),
    };

    pub const Reason = enum(i32) {
        Unknown = 0,
        Optimistic = 1,
        PessimisticRetry = 2,
        SelfRolledBack = 3,
        RcCheckTs = 4,
        LazyUniquenessCheck = 5,
        _,
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const AlreadyExist = struct {
    key: []const u8 = &.{},

    pub const _desc_table = .{
        .key = fd(1, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const Deadlock = struct {
    lock_ts: u64 = 0,
    lock_key: []const u8 = &.{},
    deadlock_key_hash: u64 = 0,
    wait_chain: std.ArrayListUnmanaged(deadlock.WaitForEntry) = .empty,

    pub const _desc_table = .{
        .lock_ts = fd(1, .{ .scalar = .uint64 }),
        .lock_key = fd(2, .{ .scalar = .bytes }),
        .deadlock_key_hash = fd(3, .{ .scalar = .uint64 }),
        .wait_chain = fd(4, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CommitTsExpired = struct {
    start_ts: u64 = 0,
    attempted_commit_ts: u64 = 0,
    key: []const u8 = &.{},
    min_commit_ts: u64 = 0,

    pub const _desc_table = .{
        .start_ts = fd(1, .{ .scalar = .uint64 }),
        .attempted_commit_ts = fd(2, .{ .scalar = .uint64 }),
        .key = fd(3, .{ .scalar = .bytes }),
        .min_commit_ts = fd(4, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const TxnNotFound = struct {
    start_ts: u64 = 0,
    primary_key: []const u8 = &.{},

    pub const _desc_table = .{
        .start_ts = fd(1, .{ .scalar = .uint64 }),
        .primary_key = fd(2, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CommitTsTooLarge = struct {
    commit_ts: u64 = 0,

    pub const _desc_table = .{
        .commit_ts = fd(1, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const AssertionFailed = struct {
    start_ts: u64 = 0,
    key: []const u8 = &.{},
    assertion: Assertion = @enumFromInt(0),
    existing_start_ts: u64 = 0,
    existing_commit_ts: u64 = 0,

    pub const _desc_table = .{
        .start_ts = fd(1, .{ .scalar = .uint64 }),
        .key = fd(2, .{ .scalar = .bytes }),
        .assertion = fd(3, .@"enum"),
        .existing_start_ts = fd(4, .{ .scalar = .uint64 }),
        .existing_commit_ts = fd(5, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const PrimaryMismatch = struct {
    lock_info: ?LockInfo = null,

    pub const _desc_table = .{
        .lock_info = fd(1, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const TimeDetail = struct {
    wait_wall_time_ms: u64 = 0,
    process_wall_time_ms: u64 = 0,
    kv_read_wall_time_ms: u64 = 0,
    total_rpc_wall_time_ns: u64 = 0,

    pub const _desc_table = .{
        .wait_wall_time_ms = fd(1, .{ .scalar = .uint64 }),
        .process_wall_time_ms = fd(2, .{ .scalar = .uint64 }),
        .kv_read_wall_time_ms = fd(3, .{ .scalar = .uint64 }),
        .total_rpc_wall_time_ns = fd(4, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const TimeDetailV2 = struct {
    wait_wall_time_ns: u64 = 0,
    process_wall_time_ns: u64 = 0,
    process_suspend_wall_time_ns: u64 = 0,
    kv_read_wall_time_ns: u64 = 0,
    total_rpc_wall_time_ns: u64 = 0,

    pub const _desc_table = .{
        .wait_wall_time_ns = fd(1, .{ .scalar = .uint64 }),
        .process_wall_time_ns = fd(2, .{ .scalar = .uint64 }),
        .process_suspend_wall_time_ns = fd(3, .{ .scalar = .uint64 }),
        .kv_read_wall_time_ns = fd(4, .{ .scalar = .uint64 }),
        .total_rpc_wall_time_ns = fd(5, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ScanInfo = struct {
    total: i64 = 0,
    processed: i64 = 0,
    read_bytes: i64 = 0,

    pub const _desc_table = .{
        .total = fd(1, .{ .scalar = .int64 }),
        .processed = fd(2, .{ .scalar = .int64 }),
        .read_bytes = fd(3, .{ .scalar = .int64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ScanDetail = struct {
    write: ?ScanInfo = null,
    lock: ?ScanInfo = null,
    data: ?ScanInfo = null,

    pub const _desc_table = .{
        .write = fd(1, .submessage),
        .lock = fd(2, .submessage),
        .data = fd(3, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ScanDetailV2 = struct {
    processed_versions: u64 = 0,
    processed_versions_size: u64 = 0,
    total_versions: u64 = 0,
    rocksdb_delete_skipped_count: u64 = 0,
    rocksdb_key_skipped_count: u64 = 0,
    rocksdb_block_cache_hit_count: u64 = 0,
    rocksdb_block_read_count: u64 = 0,
    rocksdb_block_read_byte: u64 = 0,
    rocksdb_block_read_nanos: u64 = 0,
    get_snapshot_nanos: u64 = 0,
    read_index_propose_wait_nanos: u64 = 0,
    read_index_confirm_wait_nanos: u64 = 0,
    read_pool_schedule_wait_nanos: u64 = 0,

    pub const _desc_table = .{
        .processed_versions = fd(1, .{ .scalar = .uint64 }),
        .processed_versions_size = fd(8, .{ .scalar = .uint64 }),
        .total_versions = fd(2, .{ .scalar = .uint64 }),
        .rocksdb_delete_skipped_count = fd(3, .{ .scalar = .uint64 }),
        .rocksdb_key_skipped_count = fd(4, .{ .scalar = .uint64 }),
        .rocksdb_block_cache_hit_count = fd(5, .{ .scalar = .uint64 }),
        .rocksdb_block_read_count = fd(6, .{ .scalar = .uint64 }),
        .rocksdb_block_read_byte = fd(7, .{ .scalar = .uint64 }),
        .rocksdb_block_read_nanos = fd(9, .{ .scalar = .uint64 }),
        .get_snapshot_nanos = fd(10, .{ .scalar = .uint64 }),
        .read_index_propose_wait_nanos = fd(11, .{ .scalar = .uint64 }),
        .read_index_confirm_wait_nanos = fd(12, .{ .scalar = .uint64 }),
        .read_pool_schedule_wait_nanos = fd(13, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ExecDetails = struct {
    time_detail: ?TimeDetail = null,
    scan_detail: ?ScanDetail = null,

    pub const _desc_table = .{
        .time_detail = fd(1, .submessage),
        .scan_detail = fd(2, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ExecDetailsV2 = struct {
    time_detail: ?TimeDetail = null,
    scan_detail_v2: ?ScanDetailV2 = null,
    write_detail: ?WriteDetail = null,
    time_detail_v2: ?TimeDetailV2 = null,

    pub const _desc_table = .{
        .time_detail = fd(1, .submessage),
        .scan_detail_v2 = fd(2, .submessage),
        .write_detail = fd(3, .submessage),
        .time_detail_v2 = fd(4, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const WriteDetail = struct {
    store_batch_wait_nanos: u64 = 0,
    propose_send_wait_nanos: u64 = 0,
    persist_log_nanos: u64 = 0,
    raft_db_write_leader_wait_nanos: u64 = 0,
    raft_db_sync_log_nanos: u64 = 0,
    raft_db_write_memtable_nanos: u64 = 0,
    commit_log_nanos: u64 = 0,
    apply_batch_wait_nanos: u64 = 0,
    apply_log_nanos: u64 = 0,
    apply_mutex_lock_nanos: u64 = 0,
    apply_write_leader_wait_nanos: u64 = 0,
    apply_write_wal_nanos: u64 = 0,
    apply_write_memtable_nanos: u64 = 0,
    latch_wait_nanos: u64 = 0,
    process_nanos: u64 = 0,
    throttle_nanos: u64 = 0,
    pessimistic_lock_wait_nanos: u64 = 0,

    pub const _desc_table = .{
        .store_batch_wait_nanos = fd(1, .{ .scalar = .uint64 }),
        .propose_send_wait_nanos = fd(2, .{ .scalar = .uint64 }),
        .persist_log_nanos = fd(3, .{ .scalar = .uint64 }),
        .raft_db_write_leader_wait_nanos = fd(4, .{ .scalar = .uint64 }),
        .raft_db_sync_log_nanos = fd(5, .{ .scalar = .uint64 }),
        .raft_db_write_memtable_nanos = fd(6, .{ .scalar = .uint64 }),
        .commit_log_nanos = fd(7, .{ .scalar = .uint64 }),
        .apply_batch_wait_nanos = fd(8, .{ .scalar = .uint64 }),
        .apply_log_nanos = fd(9, .{ .scalar = .uint64 }),
        .apply_mutex_lock_nanos = fd(10, .{ .scalar = .uint64 }),
        .apply_write_leader_wait_nanos = fd(11, .{ .scalar = .uint64 }),
        .apply_write_wal_nanos = fd(12, .{ .scalar = .uint64 }),
        .apply_write_memtable_nanos = fd(13, .{ .scalar = .uint64 }),
        .latch_wait_nanos = fd(14, .{ .scalar = .uint64 }),
        .process_nanos = fd(15, .{ .scalar = .uint64 }),
        .throttle_nanos = fd(16, .{ .scalar = .uint64 }),
        .pessimistic_lock_wait_nanos = fd(17, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const KvPair = struct {
    @"error": ?KeyError = null,
    key: []const u8 = &.{},
    value: []const u8 = &.{},

    pub const _desc_table = .{
        .@"error" = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
        .value = fd(3, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const Mutation = struct {
    op: Op = @enumFromInt(0),
    key: []const u8 = &.{},
    value: []const u8 = &.{},
    assertion: Assertion = @enumFromInt(0),

    pub const _desc_table = .{
        .op = fd(1, .@"enum"),
        .key = fd(2, .{ .scalar = .bytes }),
        .value = fd(3, .{ .scalar = .bytes }),
        .assertion = fd(4, .@"enum"),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const MvccWrite = struct {
    type: Op = @enumFromInt(0),
    start_ts: u64 = 0,
    commit_ts: u64 = 0,
    short_value: []const u8 = &.{},
    has_overlapped_rollback: bool = false,
    has_gc_fence: bool = false,
    gc_fence: u64 = 0,
    last_change_ts: u64 = 0,
    versions_to_last_change: u64 = 0,

    pub const _desc_table = .{
        .type = fd(1, .@"enum"),
        .start_ts = fd(2, .{ .scalar = .uint64 }),
        .commit_ts = fd(3, .{ .scalar = .uint64 }),
        .short_value = fd(4, .{ .scalar = .bytes }),
        .has_overlapped_rollback = fd(5, .{ .scalar = .bool }),
        .has_gc_fence = fd(6, .{ .scalar = .bool }),
        .gc_fence = fd(7, .{ .scalar = .uint64 }),
        .last_change_ts = fd(8, .{ .scalar = .uint64 }),
        .versions_to_last_change = fd(9, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const MvccValue = struct {
    start_ts: u64 = 0,
    value: []const u8 = &.{},

    pub const _desc_table = .{
        .start_ts = fd(1, .{ .scalar = .uint64 }),
        .value = fd(2, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const MvccLock = struct {
    type: Op = @enumFromInt(0),
    start_ts: u64 = 0,
    primary: []const u8 = &.{},
    short_value: []const u8 = &.{},
    ttl: u64 = 0,
    for_update_ts: u64 = 0,
    txn_size: u64 = 0,
    use_async_commit: bool = false,
    secondaries: std.ArrayListUnmanaged([]const u8) = .empty,
    rollback_ts: std.ArrayListUnmanaged(u64) = .empty,
    last_change_ts: u64 = 0,
    versions_to_last_change: u64 = 0,

    pub const _desc_table = .{
        .type = fd(1, .@"enum"),
        .start_ts = fd(2, .{ .scalar = .uint64 }),
        .primary = fd(3, .{ .scalar = .bytes }),
        .short_value = fd(4, .{ .scalar = .bytes }),
        .ttl = fd(5, .{ .scalar = .uint64 }),
        .for_update_ts = fd(6, .{ .scalar = .uint64 }),
        .txn_size = fd(7, .{ .scalar = .uint64 }),
        .use_async_commit = fd(8, .{ .scalar = .bool }),
        .secondaries = fd(9, .{ .repeated = .{ .scalar = .bytes } }),
        .rollback_ts = fd(10, .{ .packed_repeated = .{ .scalar = .uint64 } }),
        .last_change_ts = fd(11, .{ .scalar = .uint64 }),
        .versions_to_last_change = fd(12, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const MvccInfo = struct {
    lock: ?MvccLock = null,
    writes: std.ArrayListUnmanaged(MvccWrite) = .empty,
    values: std.ArrayListUnmanaged(MvccValue) = .empty,

    pub const _desc_table = .{
        .lock = fd(1, .submessage),
        .writes = fd(2, .{ .repeated = .submessage }),
        .values = fd(3, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const TxnInfo = struct {
    txn: u64 = 0,
    status: u64 = 0,

    pub const _desc_table = .{
        .txn = fd(1, .{ .scalar = .uint64 }),
        .status = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const KeyRange = struct {
    start_key: []const u8 = &.{},
    end_key: []const u8 = &.{},

    pub const _desc_table = .{
        .start_key = fd(1, .{ .scalar = .bytes }),
        .end_key = fd(2, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const LeaderInfo = struct {
    region_id: u64 = 0,
    peer_id: u64 = 0,
    term: u64 = 0,
    region_epoch: ?metapb.RegionEpoch = null,
    read_state: ?ReadState = null,

    pub const _desc_table = .{
        .region_id = fd(1, .{ .scalar = .uint64 }),
        .peer_id = fd(2, .{ .scalar = .uint64 }),
        .term = fd(3, .{ .scalar = .uint64 }),
        .region_epoch = fd(4, .submessage),
        .read_state = fd(5, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const ReadState = struct {
    applied_index: u64 = 0,
    safe_ts: u64 = 0,

    pub const _desc_table = .{
        .applied_index = fd(1, .{ .scalar = .uint64 }),
        .safe_ts = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CheckLeaderRequest = struct {
    regions: std.ArrayListUnmanaged(LeaderInfo) = .empty,
    ts: u64 = 0,

    pub const _desc_table = .{
        .regions = fd(1, .{ .repeated = .submessage }),
        .ts = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CheckLeaderResponse = struct {
    regions: std.ArrayListUnmanaged(u64) = .empty,
    ts: u64 = 0,

    pub const _desc_table = .{
        .regions = fd(1, .{ .packed_repeated = .{ .scalar = .uint64 } }),
        .ts = fd(2, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const StoreSafeTSRequest = struct {
    key_range: ?KeyRange = null,

    pub const _desc_table = .{
        .key_range = fd(1, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const StoreSafeTSResponse = struct {
    safe_ts: u64 = 0,

    pub const _desc_table = .{
        .safe_ts = fd(1, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawGetKeyTTLRequest = struct {
    context: ?Context = null,
    key: []const u8 = &.{},
    cf: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
        .cf = fd(3, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawGetKeyTTLResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    ttl: u64 = 0,
    not_found: bool = false,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .ttl = fd(3, .{ .scalar = .uint64 }),
        .not_found = fd(4, .{ .scalar = .bool }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawCASRequest = struct {
    context: ?Context = null,
    key: []const u8 = &.{},
    value: []const u8 = &.{},
    previous_not_exist: bool = false,
    previous_value: []const u8 = &.{},
    cf: []const u8 = &.{},
    ttl: u64 = 0,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .key = fd(2, .{ .scalar = .bytes }),
        .value = fd(3, .{ .scalar = .bytes }),
        .previous_not_exist = fd(4, .{ .scalar = .bool }),
        .previous_value = fd(5, .{ .scalar = .bytes }),
        .cf = fd(6, .{ .scalar = .string }),
        .ttl = fd(7, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawCASResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    succeed: bool = false,
    previous_not_exist: bool = false,
    previous_value: []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .succeed = fd(3, .{ .scalar = .bool }),
        .previous_not_exist = fd(4, .{ .scalar = .bool }),
        .previous_value = fd(5, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const GetLockWaitInfoRequest = struct {
    context: ?Context = null,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const GetLockWaitInfoResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    entries: std.ArrayListUnmanaged(deadlock.WaitForEntry) = .empty,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .entries = fd(3, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const GetLockWaitHistoryRequest = struct {
    context: ?Context = null,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const GetLockWaitHistoryResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    entries: std.ArrayListUnmanaged(deadlock.WaitForEntry) = .empty,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .entries = fd(3, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawCoprocessorRequest = struct {
    context: ?Context = null,
    copr_name: []const u8 = &.{},
    copr_version_req: []const u8 = &.{},
    ranges: std.ArrayListUnmanaged(KeyRange) = .empty,
    data: []const u8 = &.{},

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .copr_name = fd(2, .{ .scalar = .string }),
        .copr_version_req = fd(3, .{ .scalar = .string }),
        .ranges = fd(4, .{ .repeated = .submessage }),
        .data = fd(5, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawCoprocessorResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    data: []const u8 = &.{},

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .data = fd(3, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawChecksumRequest = struct {
    context: ?Context = null,
    algorithm: ChecksumAlgorithm = @enumFromInt(0),
    ranges: std.ArrayListUnmanaged(KeyRange) = .empty,

    pub const _desc_table = .{
        .context = fd(1, .submessage),
        .algorithm = fd(2, .@"enum"),
        .ranges = fd(3, .{ .repeated = .submessage }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const RawChecksumResponse = struct {
    region_error: ?errorpb.Error = null,
    @"error": []const u8 = &.{},
    checksum: u64 = 0,
    total_kvs: u64 = 0,
    total_bytes: u64 = 0,

    pub const _desc_table = .{
        .region_error = fd(1, .submessage),
        .@"error" = fd(2, .{ .scalar = .string }),
        .checksum = fd(3, .{ .scalar = .uint64 }),
        .total_kvs = fd(4, .{ .scalar = .uint64 }),
        .total_bytes = fd(5, .{ .scalar = .uint64 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CompactError = struct {
    @"error": ?error_union = null,

    pub const _error_case = enum {
        err_invalid_start_key,
        err_physical_table_not_exist,
        err_compact_in_progress,
        err_too_many_pending_tasks,
    };
    pub const error_union = union(_error_case) {
        err_invalid_start_key: CompactErrorInvalidStartKey,
        err_physical_table_not_exist: CompactErrorPhysicalTableNotExist,
        err_compact_in_progress: CompactErrorCompactInProgress,
        err_too_many_pending_tasks: CompactErrorTooManyPendingTasks,
        pub const _desc_table = .{
            .err_invalid_start_key = fd(1, .submessage),
            .err_physical_table_not_exist = fd(2, .submessage),
            .err_compact_in_progress = fd(3, .submessage),
            .err_too_many_pending_tasks = fd(4, .submessage),
        };
    };

    pub const _desc_table = .{
        .@"error" = fd(null, .{ .oneof = error_union }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CompactErrorInvalidStartKey = struct {
    pub const _desc_table = .{};

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CompactErrorPhysicalTableNotExist = struct {
    pub const _desc_table = .{};

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CompactErrorCompactInProgress = struct {
    pub const _desc_table = .{};

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CompactErrorTooManyPendingTasks = struct {
    pub const _desc_table = .{};

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CompactRequest = struct {
    start_key: []const u8 = &.{},
    physical_table_id: i64 = 0,
    logical_table_id: i64 = 0,
    api_version: APIVersion = @enumFromInt(0),
    keyspace_id: u32 = 0,

    pub const _desc_table = .{
        .start_key = fd(1, .{ .scalar = .bytes }),
        .physical_table_id = fd(2, .{ .scalar = .int64 }),
        .logical_table_id = fd(3, .{ .scalar = .int64 }),
        .api_version = fd(7, .@"enum"),
        .keyspace_id = fd(8, .{ .scalar = .uint32 }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const CompactResponse = struct {
    @"error": ?CompactError = null,
    has_remaining: bool = false,
    compacted_start_key: []const u8 = &.{},
    compacted_end_key: []const u8 = &.{},

    pub const _desc_table = .{
        .@"error" = fd(1, .submessage),
        .has_remaining = fd(2, .{ .scalar = .bool }),
        .compacted_start_key = fd(3, .{ .scalar = .bytes }),
        .compacted_end_key = fd(4, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const TiFlashSystemTableRequest = struct {
    sql: []const u8 = &.{},

    pub const _desc_table = .{
        .sql = fd(1, .{ .scalar = .string }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const TiFlashSystemTableResponse = struct {
    data: []const u8 = &.{},

    pub const _desc_table = .{
        .data = fd(1, .{ .scalar = .bytes }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};
